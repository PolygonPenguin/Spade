// Main.spade
// Main class - program execution starts here.
// Demonstrates various Spade features.

class Main uses Default, Math implements Runnable:
public static Void main():

// Create Point objects.
Point p1 = new Point(1.0, 2.0);
Point p2 = new Point(5.0, 5.0);

// Create Circle objects (using both constructors).
Circle c1 = new Circle(p1, 3.0);
Circle c2 = new Circle(0.0, 0.0, 2.0);

// Create Rectangle objects (using both constructors).
Rectangle r1 = new Rectangle(p2, 4.0, 6.0);
Rectangle r2 = new Rectangle(new Point(0.0, 1.0), 2.0, 2.0, "MyRect");

// Operator overloading (+ on Circle).
Circle c3 = c1 + c2; // Calls c1._add_(c2)
print("c3: " + c3.toString());

// Polymorphism and collections (List).
List<Shape> shapeList = [c1, r1, c3, r2]; // Direct initialization.

print("Shapes in List (with areas):");
for (Shape s : shapeList) {
    print("  " + s.toString() + ", Area: " + s.getArea().toString());
    print("  Index in loop: " + _index_.toString()); // Implicit '_index_'.
}

// Inline tuple-like structure (Set).
[Str, Shape, Int] mySet = ["Example Set", c1, 42];
print("Set contents: " + mySet.toString());

// Nested Set (correctly nested and typed).
[Str, [Int, Str], Bool] nestedSet = ["outer", [123, "inner"], false];
String outerStr = nestedSet[0];         // "outer"
[Int, Str] innerSet = nestedSet[1];    // [123, "inner"]
Int innerInt = innerSet[0];           // 123
String innerStr = innerSet[1];          // "inner"
Bool outerBool = nestedSet[2];         // false
Int chainedInt = nestedSet[1][0];    // 123 (chained indexing)

print("Nested Set: " + nestedSet.toString());

// Illustrative Set (for demonstrating extraction to List).
[Circle, Rectangle, Circle, Rectangle, String] tempSet = [c1, r1, c3, r2, "Hello"];

// Extracting Shapes from tempSet into a List<Shape>.
List<Shape> shapeList2 = new List<Shape>();
for (Object item : tempSet) {
    if (isInstance(item, Shape)) {
        shapeList2.add(item);
    }
}

// Operator overloading (== on Point, calls _equals_).
Point p3 = new Point(1.0, 2.0); // Same coordinates as p1.
if (p1 == p3) { // Uses p1._equals_(p3)
    print("p1 and p3 are equal.");
} else {
    print("p1 and p3 are not equal.");
}

print("Value of PI: " + PI.toString());